# ü§ñ R√®gles Cursor pour le Projet Soliva

## üìã Vue d'ensemble du projet

Ce projet est un **CMS Next.js** avec un syst√®me de blocs modulaires auto-d√©clar√©s.

---

## üéØ Agents disponibles

### üß± **Agent BLOCKS** - Cr√©ation et maintenance des blocs

**Quand l'utiliser** : Pour cr√©er, modifier ou d√©bugger des blocs de contenu

**Comp√©tences** :
- Cr√©er de nouveaux blocs auto-d√©clar√©s
- Modifier des blocs existants
- D√©bugger les erreurs de rendu
- Optimiser les performances des blocs

**Localisation** : `src/blocks/auto-declared/`

**Documentation** : `docs/agents/AGENT-BLOCKS.md`

**Conventions** :
- Toujours cr√©er 3 fichiers : `component.tsx`, `editor.tsx`, `index.ts`
- Typer les interfaces avec TypeScript
- Utiliser `registerAutoBlock()` dans `index.ts`
- Ajouter l'import dans `src/blocks/auto-declared/index.ts`
- Utiliser `MediaUploader` avec `currentUrl` et `onUpload`
- Support obligatoire du th√®me : `light | dark | auto`
- Classes Tailwind pour le style
- Labels en fran√ßais dans l'√©diteur

---

### üìù **Agent CONTENT** - R√©dacteur + SEO Expert

**Quand l'utiliser** : Pour cr√©er et g√©rer tout le contenu du site

**Comp√©tences** :
- Cr√©er des articles de blog complets (structure, ton, SEO)
- Modifier le contenu des pages (home, studio, work, etc.)
- Optimiser le SEO (meta, schemas, liens internes)
- Utiliser les blocs existants pour structurer le contenu
- G√©n√©rer du contenu dans le ton Soliva (direct, concret, sans bullshit)

**Localisation** : `data/content.json`, `src/types/content.ts`

**Documentation** : `docs/agents/AGENT-CONTENT.md`

**Article de r√©f√©rence** : `http://localhost:3006/blog/les-faux-outils-ia-qui-sont-juste-des-scripts`

**Conventions** :
- Respecter le template de r√©f√©rence (structure H2, ton direct, ~2000 mots)
- Toujours optimiser le SEO complet (keyword, meta, schemas, liens internes)
- Utiliser les blocs auto-d√©clar√©s existants (ContentBlock, H2Block, ExpandableCard, etc.)
- Valider le JSON avant de sauvegarder
- Cr√©er des backups automatiques
- Signature √©ditoriale en italique en fin d'article

---

### üé® **Agent UI** - Interface admin et composants UI

**Quand l'utiliser** : Pour modifier l'interface admin ou les composants UI

**Comp√©tences** :
- Modifier l'admin (`src/app/admin/`)
- Cr√©er des composants UI r√©utilisables
- Am√©liorer l'UX
- G√©rer les th√®mes

**Localisation** : `src/app/admin/`, `src/components/ui/`

**Documentation** : `docs/ADMIN-THEME-SYSTEM.md`

---

### üîß **Agent API** - Backend et APIs

**Quand l'utiliser** : Pour les routes API, l'authentification, les webhooks

**Comp√©tences** :
- Cr√©er/modifier des routes API
- G√©rer l'authentification
- Int√©grations externes
- Upload de fichiers

**Localisation** : `src/app/api/`

---

### üèóÔ∏è **Agent ARCHITECTURE** - Structure et configuration

**Quand l'utiliser** : Pour la config, les migrations, l'architecture globale

**Comp√©tences** :
- Modifier la configuration (Next.js, TypeScript, Tailwind)
- Migrations de donn√©es
- Scripts d'automatisation
- Refactoring global

**Localisation** : Racine du projet, `scripts/`

**Documentation** : `docs/AGENTS-GUIDE.md`

---

## üö® R√®gles g√©n√©rales

### Pour TOUS les agents

1. **Toujours lire la doc** : Consulter `docs/agents/AGENT-[DOMAINE].md` avant de commencer
2. **TypeScript strict** : Typer correctement toutes les variables
3. **Pas de console.log** en production : Nettoyer les logs de debug
4. **Tester avant de commit** : Lancer `npm run build` pour valider
5. **Convention de nommage** : PascalCase pour composants, camelCase pour fonctions
6. **Fran√ßais** : Labels, commentaires et messages en fran√ßais
7. **Responsive** : Tout doit √™tre mobile-first

### Workflow de cr√©ation de bloc

```bash
1. Cr√©er le dossier : src/blocks/auto-declared/MonBloc/
2. Cr√©er component.tsx (rendu frontend)
3. Cr√©er editor.tsx (interface admin)
4. Cr√©er index.ts (enregistrement)
5. Ajouter l'import dans src/blocks/auto-declared/index.ts
6. Tester : npm run dev
7. Valider : npm run build
```

### Interdictions

‚ùå Ne JAMAIS modifier `data/content.json` directement (passer par l'API)  
‚ùå Ne JAMAIS supprimer des blocs utilis√©s dans le contenu  
‚ùå Ne JAMAIS commit sans tester la compilation  
‚ùå Ne JAMAIS utiliser `any` en TypeScript (sauf cas exceptionnels)  
‚ùå Ne JAMAIS hardcoder des URLs ou des chemins absolus

---

## üìö Documentation principale

- **Guide agents** : `docs/AGENTS-GUIDE.md`
- **Syst√®me de blocs** : `README-SCALABLE-BLOCKS.md`
- **Syst√®me de contenu** : `README-CONTENT-SYSTEM.md`
- **Admin** : `README-ADMIN-SYSTEM.md`

---

## üéØ Exemples de prompts

### Pour cr√©er un bloc
```
@AGENT-BLOCKS Cr√©e un bloc FAQ avec questions/r√©ponses d√©roulantes,
support du th√®me et √©dition facile dans l'admin
```

### Pour cr√©er du contenu
```
@AGENT-CONTENT Cr√©e un article "Les erreurs SEO courantes en 2025"
avec structure H2, exemples concrets, FAQ en ExpandableCard,
et SEO complet optimis√©
```

### Pour am√©liorer l'UI
```
@AGENT-UI Am√©liore l'interface d'upload d'images dans l'admin
avec preview et drag & drop
```

---

## ‚úÖ Checklist avant commit

- [ ] `npm run build` passe sans erreur
- [ ] Aucun console.log restant
- [ ] Types TypeScript corrects
- [ ] Test√© en dev
- [ ] Documentation mise √† jour si n√©cessaire
- [ ] Responsive v√©rifi√©

---

## üÜò En cas de probl√®me

1. Consulter `docs/agents/AGENT-[DOMAINE].md`
2. V√©rifier les erreurs TypeScript : `npm run build`
3. Chercher dans le code existant des exemples similaires
4. Lire les commentaires dans le code

---

**Version** : 1.0  
**Derni√®re mise √† jour** : 21 octobre 2025

