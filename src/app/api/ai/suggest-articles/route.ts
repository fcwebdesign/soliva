import { NextRequest, NextResponse } from 'next/server';
import { readContent } from '@/lib/content';

export const runtime = 'nodejs';

interface ArticleSuggestion {
  title: string;
  keyword: string;
  angle: string;
  estimatedWords: number;
}

export async function POST(request: NextRequest) {
  try {
    console.log('üí° API Suggest Articles - D√©but');
    
    // Lire le contenu existant
    const content = await readContent();
    const existingArticles = content.blog?.articles || [];
    
    // Extraire les titres existants pour √©viter les doublons
    const existingTitles = existingArticles.map(a => a.title).filter(Boolean);
    
    console.log('üìö Articles existants:', existingTitles.length);

    // Appel √† l'IA pour sugg√©rer des id√©es
    const systemPrompt = `Tu es un expert en strat√©gie de contenu et SEO pour Soliva, un studio cr√©atif sp√©cialis√© en d√©veloppement web, IA appliqu√©e et strat√©gie de marque.

TON SOLIVA : Direct, cash, sans bullshit. Provocateur mais bienveillant. Concret avec des exemples r√©els.

TH√âMATIQUES PRINCIPALES :
- D√©veloppement web (WordPress, Next.js, CMS, performance)
- E-commerce (Shopify, conversion, UX)
- IA appliqu√©e (vrais outils vs faux outils, automation, prompts)
- Branding & strat√©gie de marque
- Design & UX
- No-code vs code
- SEO technique

EXEMPLES D'ANGLES SOLIVA :
- "Pourquoi X ne marche pas" (d√©mystifier)
- "Le mythe de Y" (casser les id√©es re√ßues)
- "Arr√™tez de Z" (provocateur)
- "La v√©rit√© sur W" (transparence)

OBJECTIF SEO :
- Titres accrocheurs mais optimis√©s
- Keywords recherch√©s
- Sujets √† fort potentiel de trafic
- Compl√©mentaires au contenu existant`;

    const userPrompt = `Analyse ces articles existants et sugg√®re 10 NOUVELLES id√©es d'articles pour Soliva.

ARTICLES EXISTANTS :
${existingTitles.slice(0, 30).map((t, i) => `${i + 1}. ${t}`).join('\n')}

CONSIGNES :
1. Identifier les GAPS : quels sujets manquent ?
2. Trouver des angles provocateurs mais pertinents
3. Optimiser pour le SEO (keywords recherch√©s)
4. Respecter le ton Soliva (direct, sans langue de bois)
5. √âviter ABSOLUMENT les doublons avec l'existant
6. M√©langer les th√©matiques (web, e-commerce, IA, branding)

FORMAT DE R√âPONSE (JSON strict) :
{
  "suggestions": [
    {
      "title": "Titre accrocheur optimis√© SEO",
      "keyword": "mot-cl√© principal",
      "angle": "Angle √©ditorial en 1 phrase",
      "estimatedWords": 2000
    }
  ]
}

G√©n√®re EXACTEMENT 10 suggestions vari√©es et pertinentes.`;

    console.log('ü§ñ Appel OpenAI pour suggestions...');

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 2000,
        temperature: 0.8,
        response_format: { type: "json_object" }
      }),
    });

    if (!openaiResponse.ok) {
      throw new Error(`OpenAI API error: ${openaiResponse.status}`);
    }

    const openaiData = await openaiResponse.json();
    let responseText = openaiData.choices[0]?.message?.content;

    if (!responseText) {
      throw new Error('Pas de r√©ponse de l\'IA');
    }

    // Parser la r√©ponse
    const result = JSON.parse(responseText);
    
    console.log('‚úÖ Suggestions g√©n√©r√©es:', result.suggestions?.length || 0);

    return NextResponse.json({
      suggestions: result.suggestions || [],
      existingCount: existingTitles.length
    });

  } catch (error) {
    console.error('‚ùå Erreur suggestions articles:', error);
    return NextResponse.json(
      { 
        error: 'Erreur lors de la g√©n√©ration des suggestions',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}

