import { NextRequest, NextResponse } from 'next/server';
import { readContent } from '@/lib/content';

export async function POST(request: NextRequest) {
  try {
    const { blockType, pageKey, context, existingBlocks } = await request.json();
    
    const content = await readContent();
    
    // Contexte sp√©cifique selon la page avec plus de d√©tails
    let pageContext = '';
    if (pageKey === 'studio') {
      const studioBlocks = content.studio?.blocks || [];
      const existingContent = studioBlocks.map(b => b.content).join(' ');
      pageContext = `Page: Studio cr√©atif Soliva. ${content.studio?.hero?.title || 'Le studio'}. ${content.studio?.description || ''}. Contenu existant: ${existingContent}`;
    } else if (pageKey === 'work') {
      const projects = content.work?.projects || [];
      const projectTitles = projects.map(p => p.title).join(', ');
      pageContext = `Page: Nos r√©alisations. ${content.work?.hero?.title || 'Nos r√©alisations'}. ${content.work?.description || ''}. Projets: ${projectTitles}`;
    } else if (pageKey === 'blog') {
      const articles = content.blog?.articles || [];
      const articleTitles = articles.map(a => a.title).join(', ');
      pageContext = `Page: Le journal. ${content.blog?.hero?.title || 'Le journal'}. ${content.blog?.description || ''}. Articles: ${articleTitles}`;
    } else if (pageKey === 'contact') {
      pageContext = `Page: Contact. ${content.contact?.hero?.title || 'Contact'}. ${content.contact?.description || ''}. Sections: ${JSON.stringify(content.contact?.sections || {})}`;
    }

    // Analyser les blocs existants pour la coh√©rence
    let blocksContext = '';
    if (existingBlocks && existingBlocks.length > 0) {
      const h2Titles = existingBlocks.filter(b => b.type === 'h2').map(b => b.content);
      const contentBlocks = existingBlocks.filter(b => b.type === 'content').map(b => b.content);
      
      blocksContext = `Blocs existants - Titres H2: ${h2Titles.join(', ')}. Contenu: ${contentBlocks.join(' ')}`;
    }

    // Instructions sp√©cifiques selon le type de bloc - style direct et professionnel
    let blockInstructions = '';
    switch (blockType) {
      case 'content':
        blockInstructions = `G√©n√®re un paragraphe de contenu clair et direct (2-3 phrases).
        √âvite les m√©taphores po√©tiques, les formulations vagues, et le jargon marketing.
        Utilise des faits concrets, des exemples pratiques, ou des b√©n√©fices tangibles.
        IMPORTANT: Le contenu doit √™tre coh√©rent avec les titres H2 existants.
        Style: professionnel, direct, authentique.`;
        break;
      case 'h2':
        blockInstructions = `G√©n√®re un titre H2 clair et impactant (3-6 mots).
        √âvite les titres g√©n√©riques comme "Notre approche", "Nos services", "Qui nous sommes".
        Utilise des verbes d'action concrets ou des questions directes.
        IMPORTANT: Le titre doit √™tre coh√©rent avec le contenu existant.
        Style: direct, professionnel, m√©morable.`;
        break;
      case 'h3':
        blockInstructions = `G√©n√®re un titre H3 pr√©cis et descriptif (2-4 mots).
        √âvite les titres vagues comme "Processus", "M√©thode", "R√©sultats".
        Utilise des termes concrets, des chiffres, ou des concepts sp√©cifiques.
        IMPORTANT: Le titre doit s'int√©grer dans la structure existante.
        Style: pr√©cis, informatif, professionnel.`;
        break;
      default:
        blockInstructions = `G√©n√®re du contenu clair et appropri√© pour ce type de bloc.`;
    }

    // D√©terminer le bon param√®tre selon le mod√®le
    const model = 'gpt-5'; // Retour √† GPT-5 avec la nouvelle configuration
    const isGpt5 = model.startsWith('gpt-5');
    const requestBody = {
      model: model,
      messages: [
        {
          role: 'system',
          content: `Tu es copywriter senior cr√©atif sp√©cialis√© dans la cr√©ation de contenu web unique et m√©morable.

${blockInstructions}

R√®gles de style:
- √âvite absolument les clich√©s marketing ("nous accompagnons", "expertise", "solutions sur-mesure")
- √âvite les m√©taphores po√©tiques et les formulations vagues
- Utilise des faits concrets, des exemples pratiques, des b√©n√©fices tangibles
- Phrases courtes et directes, pas de prose fleurie
- Ton professionnel et authentique, pas corporate

Contraintes:
- Contenu en fran√ßais
- Style: professionnel, direct, authentique
- Phrases courtes et percutantes
- Sortie: seulement le contenu final, sans explications ni balises HTML`
        },
        {
          role: 'user',
          content: `Type de bloc: ${blockType}
Page: ${pageKey}
Contexte: ${pageContext}
Blocs existants: ${blocksContext || 'Aucun'}
Contexte suppl√©mentaire: ${context || 'Aucun'}
Timestamp: ${Date.now()}

G√©n√®re du contenu professionnel et direct pour ce bloc. Le contenu doit √™tre coh√©rent avec les autres blocs existants. √âvite toute r√©p√©tition.`
        }
      ],
    };

    // Utiliser le bon param√®tre selon le mod√®le
    if (isGpt5) {
      // GPT-5 : R√©duire drastiquement l'effort de raisonnement
      requestBody.max_completion_tokens = 300;
      requestBody.reasoning_effort = "minimal";
      console.log('üîß Configuration GPT-5 pour bloc:', JSON.stringify(requestBody, null, 2));
    } else {
      requestBody.max_tokens = 200;
      requestBody.temperature = 0.7;
      console.log('üîß Configuration GPT-4 pour bloc:', JSON.stringify(requestBody, null, 2));
    }

    console.log('üöÄ Envoi requ√™te OpenAI pour bloc:', blockType);
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });
    
    console.log('üì° Statut r√©ponse OpenAI:', openaiResponse.status, openaiResponse.statusText);

    if (!openaiResponse.ok) {
      throw new Error(`OpenAI API error: ${openaiResponse.status}`);
    }

    const openaiData = await openaiResponse.json();
    console.log('OpenAI Response:', JSON.stringify(openaiData, null, 2));
    
    const suggestedContent = openaiData.choices?.[0]?.message?.content;

    if (!suggestedContent) {
      console.error('Pas de contenu dans la r√©ponse OpenAI:', openaiData);
      throw new Error('Pas de r√©ponse de l\'IA');
    }

    return NextResponse.json({
      suggestedContent: suggestedContent.trim()
    });

  } catch (error) {
    console.error('Erreur suggestion contenu bloc:', error);
    return NextResponse.json(
      { error: error.message || 'Erreur lors de la g√©n√©ration du contenu' },
      { status: 500 }
    );
  }
} 